{
	"info": {
		"_postman_id": "0ad050b9-beb0-46f9-ade9-1bd8224852b1",
		"name": "PersonalFinanceAppCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15489094"
	},
	"item": [
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"if (response.token) {\r",
							"    pm.environment.set(\"jwt_token\", response.token);\r",
							"    console.log(\"JWT Token saved from registration response\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Aiden\",\r\n    \"email\": \"aidenTest@gmail.com\",\r\n    \"password\": \"password\",\r\n    \"country\": \"Australia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('id', 'name', 'email', 'token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"});\r",
							"var responseData = pm.response.json();\r",
							"\r",
							"// Set the jwt_token environment variable\r",
							"pm.environment.set(\"jwt_token\", responseData.token);\r",
							"\r",
							"// Verify the response status and time\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Validate response structure and required fields\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    pm.expect(responseData).to.be.an('object').that.has.all.keys('id', 'name', 'email', 'token');\r",
							"});\r",
							"\r",
							"// Check that token is a non-empty string\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"// Validate email format\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"aidenTest@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5001/api/auth/login",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Profile",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:5001/api/auth/profile",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"auth",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Income Record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"income ID\", response._id);\r",
							"\r",
							"pm.test(\"Response contains _id\", function () {\r",
							"    pm.expect(response).to.have.property('_id');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "content",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 5000.00,\r\n    \"dateEarned\":\"2025-10-03T00:00:00.000Z\",\r\n    \"description\": \"Monthly salary payment\",\r\n    \"category\": \"Salary\",\r\n    \"source\": \"ABC Company Inc.\",\r\n    \"isRecurring\": true,\r\n    \"recurringFrequency\": \"Monthly\",\r\n    \"startDate\": \"2025-01-01T00:00:00.000Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5001/api/income/addIncome",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"income",
						"addIncome"
					]
				}
			},
			"response": []
		},
		{
			"name": "View income records",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:5001/api/income/",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"income",
						""
					]
				}
			},
			"response": []
		}
	]
}